// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: proto/greet.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GreetService_SimpleRPC_FullMethodName                 = "/greet_proto.GreetService/SimpleRPC"
	GreetService_ClientStreamingRPC_FullMethodName        = "/greet_proto.GreetService/ClientStreamingRPC"
	GreetService_ServerStreamingRPC_FullMethodName        = "/greet_proto.GreetService/ServerStreamingRPC"
	GreetService_BidirectionalStreamingRPC_FullMethodName = "/greet_proto.GreetService/bidirectionalStreamingRPC"
)

// GreetServiceClient is the client API for GreetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreetServiceClient interface {
	// simple RPC
	SimpleRPC(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*HelloResponse, error)
	// client streaming RPC
	ClientStreamingRPC(ctx context.Context, opts ...grpc.CallOption) (GreetService_ClientStreamingRPCClient, error)
	// server streaming RPC
	ServerStreamingRPC(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (GreetService_ServerStreamingRPCClient, error)
	// bidirectional streaming RPC
	BidirectionalStreamingRPC(ctx context.Context, opts ...grpc.CallOption) (GreetService_BidirectionalStreamingRPCClient, error)
}

type greetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreetServiceClient(cc grpc.ClientConnInterface) GreetServiceClient {
	return &greetServiceClient{cc}
}

func (c *greetServiceClient) SimpleRPC(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, GreetService_SimpleRPC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greetServiceClient) ClientStreamingRPC(ctx context.Context, opts ...grpc.CallOption) (GreetService_ClientStreamingRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[0], GreetService_ClientStreamingRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceClientStreamingRPCClient{stream}
	return x, nil
}

type GreetService_ClientStreamingRPCClient interface {
	Send(*HelloRequest) error
	CloseAndRecv() (*MessageList, error)
	grpc.ClientStream
}

type greetServiceClientStreamingRPCClient struct {
	grpc.ClientStream
}

func (x *greetServiceClientStreamingRPCClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceClientStreamingRPCClient) CloseAndRecv() (*MessageList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MessageList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) ServerStreamingRPC(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (GreetService_ServerStreamingRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[1], GreetService_ServerStreamingRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceServerStreamingRPCClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreetService_ServerStreamingRPCClient interface {
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type greetServiceServerStreamingRPCClient struct {
	grpc.ClientStream
}

func (x *greetServiceServerStreamingRPCClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greetServiceClient) BidirectionalStreamingRPC(ctx context.Context, opts ...grpc.CallOption) (GreetService_BidirectionalStreamingRPCClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreetService_ServiceDesc.Streams[2], GreetService_BidirectionalStreamingRPC_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greetServiceBidirectionalStreamingRPCClient{stream}
	return x, nil
}

type GreetService_BidirectionalStreamingRPCClient interface {
	Send(*HelloRequest) error
	Recv() (*HelloResponse, error)
	grpc.ClientStream
}

type greetServiceBidirectionalStreamingRPCClient struct {
	grpc.ClientStream
}

func (x *greetServiceBidirectionalStreamingRPCClient) Send(m *HelloRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greetServiceBidirectionalStreamingRPCClient) Recv() (*HelloResponse, error) {
	m := new(HelloResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetServiceServer is the server API for GreetService service.
// All implementations must embed UnimplementedGreetServiceServer
// for forward compatibility
type GreetServiceServer interface {
	// simple RPC
	SimpleRPC(context.Context, *NoParam) (*HelloResponse, error)
	// client streaming RPC
	ClientStreamingRPC(GreetService_ClientStreamingRPCServer) error
	// server streaming RPC
	ServerStreamingRPC(*HelloRequest, GreetService_ServerStreamingRPCServer) error
	// bidirectional streaming RPC
	BidirectionalStreamingRPC(GreetService_BidirectionalStreamingRPCServer) error
	mustEmbedUnimplementedGreetServiceServer()
}

// UnimplementedGreetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreetServiceServer struct {
}

func (UnimplementedGreetServiceServer) SimpleRPC(context.Context, *NoParam) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleRPC not implemented")
}
func (UnimplementedGreetServiceServer) ClientStreamingRPC(GreetService_ClientStreamingRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingRPC not implemented")
}
func (UnimplementedGreetServiceServer) ServerStreamingRPC(*HelloRequest, GreetService_ServerStreamingRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingRPC not implemented")
}
func (UnimplementedGreetServiceServer) BidirectionalStreamingRPC(GreetService_BidirectionalStreamingRPCServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingRPC not implemented")
}
func (UnimplementedGreetServiceServer) mustEmbedUnimplementedGreetServiceServer() {}

// UnsafeGreetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreetServiceServer will
// result in compilation errors.
type UnsafeGreetServiceServer interface {
	mustEmbedUnimplementedGreetServiceServer()
}

func RegisterGreetServiceServer(s grpc.ServiceRegistrar, srv GreetServiceServer) {
	s.RegisterService(&GreetService_ServiceDesc, srv)
}

func _GreetService_SimpleRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreetServiceServer).SimpleRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreetService_SimpleRPC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreetServiceServer).SimpleRPC(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreetService_ClientStreamingRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).ClientStreamingRPC(&greetServiceClientStreamingRPCServer{stream})
}

type GreetService_ClientStreamingRPCServer interface {
	SendAndClose(*MessageList) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greetServiceClientStreamingRPCServer struct {
	grpc.ServerStream
}

func (x *greetServiceClientStreamingRPCServer) SendAndClose(m *MessageList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceClientStreamingRPCServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GreetService_ServerStreamingRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HelloRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreetServiceServer).ServerStreamingRPC(m, &greetServiceServerStreamingRPCServer{stream})
}

type GreetService_ServerStreamingRPCServer interface {
	Send(*HelloResponse) error
	grpc.ServerStream
}

type greetServiceServerStreamingRPCServer struct {
	grpc.ServerStream
}

func (x *greetServiceServerStreamingRPCServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _GreetService_BidirectionalStreamingRPC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreetServiceServer).BidirectionalStreamingRPC(&greetServiceBidirectionalStreamingRPCServer{stream})
}

type GreetService_BidirectionalStreamingRPCServer interface {
	Send(*HelloResponse) error
	Recv() (*HelloRequest, error)
	grpc.ServerStream
}

type greetServiceBidirectionalStreamingRPCServer struct {
	grpc.ServerStream
}

func (x *greetServiceBidirectionalStreamingRPCServer) Send(m *HelloResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greetServiceBidirectionalStreamingRPCServer) Recv() (*HelloRequest, error) {
	m := new(HelloRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreetService_ServiceDesc is the grpc.ServiceDesc for GreetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "greet_proto.GreetService",
	HandlerType: (*GreetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleRPC",
			Handler:    _GreetService_SimpleRPC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStreamingRPC",
			Handler:       _GreetService_ClientStreamingRPC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStreamingRPC",
			Handler:       _GreetService_ServerStreamingRPC_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "bidirectionalStreamingRPC",
			Handler:       _GreetService_BidirectionalStreamingRPC_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/greet.proto",
}
